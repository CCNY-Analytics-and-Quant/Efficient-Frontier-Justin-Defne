{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "889ced67-c383-4294-8fdd-0c656b21143b",
   "metadata": {},
   "source": [
    "# Efficient Frontier - Justin Do & Defne Sener"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb85ec5c-38d4-4a64-84a3-ef9b81f642af",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## **Primary Objective:** For this project, you will select a basket of seven (7) assets, calculate their individual risk/return value, combine these into the efficient frontier, and then plot the results.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67aa7f68-d7e9-4935-962f-ee3f05d44662",
   "metadata": {},
   "source": [
    "### Starting with our packages:\n",
    "- Yahoo Finance --> for data on our chosen tickers/assets\n",
    "- Numpy --> Choosing random integers for our simulation\n",
    "- Pandas --> Usage of Dataframe for easier calculations\n",
    "- Matplotlib --> Graphing our simulation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e4ad50b0-b87e-4c79-8c5a-065e718dbe49",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4708738f-e780-41ae-8970-8b5425f35b39",
   "metadata": {},
   "source": [
    "## Step 1:\n",
    "Choose seven (7) assets (preferably something with significant historical data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bf07dc0a-81f5-43c7-a5a6-c3b7e2d813b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "tickers = ['AAPL', 'V', 'HD', 'KO', 'JNJ', 'AMGN', \"NVDA\"] # Apple Inc., Visa Inc., The Home Depot, Inc., The Coca-Cola Company, Johnson & Johnson, Amgen Inc., NVIDIA Corporation\n",
    "# we're also going to set the number of assets and simulations \n",
    "num_of_assets = len(tickers)\n",
    "num_of_sim = 200000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67805d32-326b-47e0-86cc-e9f7804a87fb",
   "metadata": {},
   "source": [
    "## Step 2:\n",
    "Retrieve daily open or close data on your assets for the previous 2 years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "624cf27c-3978-4406-b8f0-3ecca614865b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  7 of 7 completed\n"
     ]
    }
   ],
   "source": [
    "period = '2y'\n",
    "_2_year_data = yf.download(tickers, period=period)['Adj Close'].pct_change()\n",
    "# _2_year_data = _2_year_data.drop(_2_year_data.index[0]) # drop the first na\n",
    "data_df = pd.DataFrame(index=tickers)\n",
    "\n",
    "# we're also going to create our montecarlo df which will hold the wieght of each asset, portfolio weighted var & return, and sharpe ratio\n",
    "monte_carlo_outcomes = pd.DataFrame(columns=tickers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e945dda4-77b5-4097-b7d6-7288f3b21ef8",
   "metadata": {},
   "source": [
    "## Step 3:\n",
    "Calculate the mean, variance, and correlation matrix for all assets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "28ebcbc0-97d7-4418-bf55-ee21c24e1b5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculating mean --> the average price of our assets\n",
    "data_df['Asset Average Returns'] = (_2_year_data * 100).mean()\n",
    "\n",
    "# calculating the variance --> returns = pct_change * 100 then we could get variance from it\n",
    "data_df['Asset Variance for Percent Change'] = (_2_year_data * 100).var()\n",
    "\n",
    "# calculating the correlation matrix between our stocks\n",
    "corr_matrix = _2_year_data.pct_change().corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bf9d89a-5f2a-4b9e-985a-0ba90706fea8",
   "metadata": {},
   "source": [
    "## Step 4:\n",
    "Calculate efficient frontier and optimal weights for your portfolio (Donâ€™t forget the output!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5ec2294-f591-477b-929a-bd382eac32ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's start with making a function to calculate the sharpe ratio \n",
    "# since we'll be using that in our function that calculates wieghted variance and return \n",
    "\n",
    "class Portfolio:\n",
    "    def __init__(self, num_of_assets, num_of_sim):\n",
    "        self.num_of_assets = num_of_assets\n",
    "        self.num_of_sim = num_of_sim\n",
    "        \n",
    "    # my methods \n",
    "    def cal_sharpe_ratio(self, weighted_return, weighted_var, risk_free_rate=0):\n",
    "        # normally the formula would be: (weighted_return - risk_free_rate)/stdev_port but we care about the relationship of the sharpe ratio not the number\n",
    "        return (weighted_return - risk_free_rate)/weighted_var\n",
    "\n",
    "    \n",
    "    def cal_weighted_var_return(self, weight_df, sim):\n",
    "        \"\"\"\n",
    "        :param weight_df: weight series of all our assets\n",
    "        :param sim: the current simulation of our assets. We're using this to update the Portfolio Weighted returns and var\n",
    "        :return: None; we're updating the monte_carlo_outcomes DataFrame\n",
    "        \"\"\"\n",
    "\n",
    "        portfolio_weighted_var = 0\n",
    "        portfolio_weighted_return = 0\n",
    "\n",
    "        for asset in tickers:\n",
    "            asset_weight = weight_df[asset]/100 # has to be a percentage before multiplying\n",
    "            asset_variance = data_df.loc[asset]['Asset Variance for Percent Change']    # extracting a row\n",
    "            asset_return = data_df.loc[asset]['Asset Average Returns']\n",
    "\n",
    "            portfolio_weighted_var += round((asset_weight * asset_variance), 3)\n",
    "            portfolio_weighted_return += round((asset_weight * asset_return), 3)\n",
    "\n",
    "        # once we went over all our assets we need to add a column with these values\n",
    "        monte_carlo_outcomes.loc[sim,'Portfolio Weighted Variance'] = float(portfolio_weighted_var)    # these are set as series so we're going to convert them into floats\n",
    "        monte_carlo_outcomes.loc[sim,'Portfolio Weighted Return'] = float(portfolio_weighted_return)\n",
    "\n",
    "        # Having the weighted var and return we could being implementing our sharpe ratio\n",
    "        sharpe_ratio = self.cal_sharpe_ratio(float(portfolio_weighted_return), float(portfolio_weighted_var)) # by default the risk_free_rate is 0 from our function\n",
    "        monte_carlo_outcomes.loc[sim,'Portfolio Weighted Sharpe Ratio'] = sharpe_ratio\n",
    "    \n",
    "    \n",
    "    def cal_monte_carlo(self):\n",
    "        # all the weight must equal to 100\n",
    "        global monte_carlo_outcomes # referencing to our global variable\n",
    "        self.num_of_assets =num_of_assets \n",
    "        self.num_of_sim = num_of_sim\n",
    "        progress = [0.25*num_of_sim, 0.50*num_of_sim, 0.75*num_of_sim, 0.9 * num_of_sim]\n",
    "        possible_weight = 100\n",
    "        for sim in range(num_of_sim):\n",
    "            weight = []\n",
    "\n",
    "            \"\"\"\n",
    "            we're going to keep running this loop to find combinations until:\n",
    "                - We have weights that are equal to the number of assets (one weight for each) \n",
    "                - The combination isn't the same as the one's we already have in our dataframe\n",
    "                - All weights are equal to 100\n",
    "            \"\"\"\n",
    "            # we could add any columns without comparison problems by getting values from our df that deals with weight\n",
    "            while len(weight) != num_of_assets \\\n",
    "                    or weight in monte_carlo_outcomes[tickers].values.tolist()\\\n",
    "                    or np.sum(weight) != 100:\n",
    "                for asset_index in range(num_of_assets):\n",
    "                    if asset_index == (num_of_assets - 1):\n",
    "                        asset_weight = possible_weight\n",
    "                    elif possible_weight > 1:  # using high and low, we cannot have or high <= 1\n",
    "                        asset_weight = np.random.randint(low=1, high=possible_weight)\n",
    "                    else:   # for our flawed combination, let's try to find another one instead of breaking\n",
    "                        # reset the weights and possible_weight to keep the while loop going and input new numbers\n",
    "                        weight = []\n",
    "                        possible_weight = 100\n",
    "                        break   # we need to break out of the for loop and sit in the while loop\n",
    "\n",
    "                    possible_weight -= asset_weight\n",
    "                    weight.append(asset_weight)\n",
    "\n",
    "            # if we reach here, we have weights for every asset that doesn't exist in our monte_carlo_outcomes\n",
    "            weight = pd.DataFrame([weight], columns=tickers)    # Shape of df is (3,3) so we need our weight to be (3,3)\n",
    "            monte_carlo_outcomes = pd.concat([monte_carlo_outcomes, weight], ignore_index=True)\n",
    "            # now that we have the weights... we need to calculate the weighted var and return\n",
    "            self.cal_weighted_var_return(weight, sim)\n",
    "            # once we finish with one sim we need to reset our possible weight\n",
    "            possible_weight = 100\n",
    "            if sim in progress:\n",
    "                print(sim)\n",
    "\n",
    "        # Once we finish all of our simulations we'll sum them and make sure all weights are 100\n",
    "        monte_carlo_outcomes['Total Weight'] = monte_carlo_outcomes[tickers].sum(axis=1)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2e3c27b9-38ac-4d1a-b092-e4bcd7cc511a",
   "metadata": {},
   "outputs": [],
   "source": [
    "our_port = Portfolio(num_of_assets, num_of_sim)\n",
    "our_port.cal_monte_carlo()  # running this method from our class Portfolio will not return anything. It only alters our monte_carlo_outcomes df "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b207de68-ebc1-4a43-aad7-837491d605af",
   "metadata": {},
   "source": [
    "## Step 5 & 6:\n",
    "- Use MatPlotLib or Seaborn libraries to graph the results (matrix and frontier)\n",
    "- Output the calculated optimal weighting (identify portfolio weightings for optimum Sharpe Ratio) along with the efficient frontier and correlation matrix charts. Output to a saved file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "09e4aabc-627f-42e0-af30-a58d20e4242e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '241000 Portfolio')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Using MatPlotLib to graph the results\n",
    "\n",
    "# Efficient Frontier \n",
    "x = monte_carlo_outcomes['Portfolio Weighted Variance']\n",
    "y = monte_carlo_outcomes['Portfolio Weighted Return']\n",
    "c = monte_carlo_outcomes['Portfolio Weighted Sharpe Ratio']\n",
    "\n",
    "min_vol_port = monte_carlo_outcomes.loc[monte_carlo_outcomes['Portfolio Weighted Variance'] == monte_carlo_outcomes['Portfolio Weighted Variance'].min()]\n",
    "optimal_port = monte_carlo_outcomes.loc[monte_carlo_outcomes['Portfolio Weighted Sharpe Ratio'] == monte_carlo_outcomes['Portfolio Weighted Sharpe Ratio'].max()] # where the sharpe ratio is max \n",
    "max_vol_port = monte_carlo_outcomes.loc[monte_carlo_outcomes['Portfolio Weighted Variance'] == monte_carlo_outcomes['Portfolio Weighted Variance'].max()]\n",
    "\n",
    "plt.figure(figsize=(12,8))\n",
    "plt.scatter(x, y, c=c, cmap='viridis')\n",
    "plt.scatter(min_vol_port['Portfolio Weighted Variance'], min_vol_port['Portfolio Weighted Return'], cmap='viridis', color='r', marker='*', s=500)\n",
    "plt.scatter(optimal_port['Portfolio Weighted Variance'], optimal_port['Portfolio Weighted Return'], cmap='viridis', color='g', marker='*', s=500)\n",
    "plt.scatter(max_vol_port['Portfolio Weighted Variance'], max_vol_port['Portfolio Weighted Return'], cmap='viridis', color='r', marker='*', s=500)\n",
    "plt.colorbar(label='Sharpe Ratio')\n",
    "plt.xlabel('Risk')\n",
    "plt.ylabel('Return')\n",
    "plt.title(f'{monte_carlo_outcomes.shape[0]} Portfolio')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6ee4b82e-f685-40f1-b3f7-ca3a68875f2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_31768_row0_col0, #T_31768_row1_col1, #T_31768_row2_col2, #T_31768_row3_col3, #T_31768_row4_col4, #T_31768_row5_col5, #T_31768_row6_col6 {\n",
       "  background-color: #b40426;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row0_col1, #T_31768_row2_col0, #T_31768_row2_col3 {\n",
       "  background-color: #4c66d6;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row0_col2, #T_31768_row0_col4, #T_31768_row1_col6, #T_31768_row2_col5, #T_31768_row4_col0, #T_31768_row4_col3, #T_31768_row5_col2, #T_31768_row6_col1, #T_31768_row6_col5 {\n",
       "  background-color: #3b4cc0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row0_col3 {\n",
       "  background-color: #3d50c3;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row0_col5, #T_31768_row1_col5, #T_31768_row3_col1 {\n",
       "  background-color: #3f53c6;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row0_col6 {\n",
       "  background-color: #465ecf;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row1_col0 {\n",
       "  background-color: #5572df;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row1_col2 {\n",
       "  background-color: #4055c8;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row1_col3, #T_31768_row3_col5 {\n",
       "  background-color: #3c4ec2;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row1_col4 {\n",
       "  background-color: #536edd;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row2_col1 {\n",
       "  background-color: #4b64d5;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row2_col4 {\n",
       "  background-color: #5470de;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row2_col6, #T_31768_row5_col0 {\n",
       "  background-color: #516ddb;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row3_col0, #T_31768_row6_col2, #T_31768_row6_col3 {\n",
       "  background-color: #485fd1;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row3_col2, #T_31768_row3_col4, #T_31768_row5_col6 {\n",
       "  background-color: #455cce;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row3_col6, #T_31768_row4_col1 {\n",
       "  background-color: #4a63d3;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row4_col2 {\n",
       "  background-color: #4257c9;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row4_col5 {\n",
       "  background-color: #4f69d9;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row4_col6 {\n",
       "  background-color: #5673e0;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row5_col1 {\n",
       "  background-color: #4961d2;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row5_col3 {\n",
       "  background-color: #4358cb;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row5_col4 {\n",
       "  background-color: #6180e9;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row6_col0 {\n",
       "  background-color: #4e68d8;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "#T_31768_row6_col4 {\n",
       "  background-color: #5f7fe8;\n",
       "  color: #f1f1f1;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_31768_\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th class=\"col_heading level0 col0\" >AAPL</th>\n",
       "      <th class=\"col_heading level0 col1\" >AMGN</th>\n",
       "      <th class=\"col_heading level0 col2\" >HD</th>\n",
       "      <th class=\"col_heading level0 col3\" >JNJ</th>\n",
       "      <th class=\"col_heading level0 col4\" >KO</th>\n",
       "      <th class=\"col_heading level0 col5\" >NVDA</th>\n",
       "      <th class=\"col_heading level0 col6\" >V</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row0\" class=\"row_heading level0 row0\" >AAPL</th>\n",
       "      <td id=\"T_31768_row0_col0\" class=\"data row0 col0\" >1.00</td>\n",
       "      <td id=\"T_31768_row0_col1\" class=\"data row0 col1\" >0.01</td>\n",
       "      <td id=\"T_31768_row0_col2\" class=\"data row0 col2\" >-0.01</td>\n",
       "      <td id=\"T_31768_row0_col3\" class=\"data row0 col3\" >-0.03</td>\n",
       "      <td id=\"T_31768_row0_col4\" class=\"data row0 col4\" >-0.08</td>\n",
       "      <td id=\"T_31768_row0_col5\" class=\"data row0 col5\" >0.00</td>\n",
       "      <td id=\"T_31768_row0_col6\" class=\"data row0 col6\" >-0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row1\" class=\"row_heading level0 row1\" >AMGN</th>\n",
       "      <td id=\"T_31768_row1_col0\" class=\"data row1 col0\" >0.01</td>\n",
       "      <td id=\"T_31768_row1_col1\" class=\"data row1 col1\" >1.00</td>\n",
       "      <td id=\"T_31768_row1_col2\" class=\"data row1 col2\" >0.01</td>\n",
       "      <td id=\"T_31768_row1_col3\" class=\"data row1 col3\" >-0.03</td>\n",
       "      <td id=\"T_31768_row1_col4\" class=\"data row1 col4\" >0.00</td>\n",
       "      <td id=\"T_31768_row1_col5\" class=\"data row1 col5\" >0.00</td>\n",
       "      <td id=\"T_31768_row1_col6\" class=\"data row1 col6\" >-0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row2\" class=\"row_heading level0 row2\" >HD</th>\n",
       "      <td id=\"T_31768_row2_col0\" class=\"data row2 col0\" >-0.01</td>\n",
       "      <td id=\"T_31768_row2_col1\" class=\"data row2 col1\" >0.01</td>\n",
       "      <td id=\"T_31768_row2_col2\" class=\"data row2 col2\" >1.00</td>\n",
       "      <td id=\"T_31768_row2_col3\" class=\"data row2 col3\" >0.02</td>\n",
       "      <td id=\"T_31768_row2_col4\" class=\"data row2 col4\" >0.01</td>\n",
       "      <td id=\"T_31768_row2_col5\" class=\"data row2 col5\" >-0.02</td>\n",
       "      <td id=\"T_31768_row2_col6\" class=\"data row2 col6\" >0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row3\" class=\"row_heading level0 row3\" >JNJ</th>\n",
       "      <td id=\"T_31768_row3_col0\" class=\"data row3 col0\" >-0.03</td>\n",
       "      <td id=\"T_31768_row3_col1\" class=\"data row3 col1\" >-0.03</td>\n",
       "      <td id=\"T_31768_row3_col2\" class=\"data row3 col2\" >0.02</td>\n",
       "      <td id=\"T_31768_row3_col3\" class=\"data row3 col3\" >1.00</td>\n",
       "      <td id=\"T_31768_row3_col4\" class=\"data row3 col4\" >-0.04</td>\n",
       "      <td id=\"T_31768_row3_col5\" class=\"data row3 col5\" >-0.01</td>\n",
       "      <td id=\"T_31768_row3_col6\" class=\"data row3 col6\" >0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row4\" class=\"row_heading level0 row4\" >KO</th>\n",
       "      <td id=\"T_31768_row4_col0\" class=\"data row4 col0\" >-0.08</td>\n",
       "      <td id=\"T_31768_row4_col1\" class=\"data row4 col1\" >0.00</td>\n",
       "      <td id=\"T_31768_row4_col2\" class=\"data row4 col2\" >0.01</td>\n",
       "      <td id=\"T_31768_row4_col3\" class=\"data row4 col3\" >-0.04</td>\n",
       "      <td id=\"T_31768_row4_col4\" class=\"data row4 col4\" >1.00</td>\n",
       "      <td id=\"T_31768_row4_col5\" class=\"data row4 col5\" >0.05</td>\n",
       "      <td id=\"T_31768_row4_col6\" class=\"data row4 col6\" >0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row5\" class=\"row_heading level0 row5\" >NVDA</th>\n",
       "      <td id=\"T_31768_row5_col0\" class=\"data row5 col0\" >0.00</td>\n",
       "      <td id=\"T_31768_row5_col1\" class=\"data row5 col1\" >0.00</td>\n",
       "      <td id=\"T_31768_row5_col2\" class=\"data row5 col2\" >-0.02</td>\n",
       "      <td id=\"T_31768_row5_col3\" class=\"data row5 col3\" >-0.01</td>\n",
       "      <td id=\"T_31768_row5_col4\" class=\"data row5 col4\" >0.05</td>\n",
       "      <td id=\"T_31768_row5_col5\" class=\"data row5 col5\" >1.00</td>\n",
       "      <td id=\"T_31768_row5_col6\" class=\"data row5 col6\" >-0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_31768_level0_row6\" class=\"row_heading level0 row6\" >V</th>\n",
       "      <td id=\"T_31768_row6_col0\" class=\"data row6 col0\" >-0.01</td>\n",
       "      <td id=\"T_31768_row6_col1\" class=\"data row6 col1\" >-0.05</td>\n",
       "      <td id=\"T_31768_row6_col2\" class=\"data row6 col2\" >0.03</td>\n",
       "      <td id=\"T_31768_row6_col3\" class=\"data row6 col3\" >0.00</td>\n",
       "      <td id=\"T_31768_row6_col4\" class=\"data row6 col4\" >0.05</td>\n",
       "      <td id=\"T_31768_row6_col5\" class=\"data row6 col5\" >-0.01</td>\n",
       "      <td id=\"T_31768_row6_col6\" class=\"data row6 col6\" >1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f4b184f3370>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Graphing our correlation matrix\n",
    "corr_matrix.style.background_gradient(cmap='coolwarm').format(precision=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "deb694d5-871e-47bb-b3ff-49420f58f742",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AAPL</th>\n",
       "      <th>V</th>\n",
       "      <th>HD</th>\n",
       "      <th>KO</th>\n",
       "      <th>JNJ</th>\n",
       "      <th>AMGN</th>\n",
       "      <th>NVDA</th>\n",
       "      <th>Portfolio Weighted Variance</th>\n",
       "      <th>Portfolio Weighted Return</th>\n",
       "      <th>Portfolio Weighted Sharpe Ratio</th>\n",
       "      <th>Total Weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2642</th>\n",
       "      <td>13</td>\n",
       "      <td>67</td>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.46</td>\n",
       "      <td>0.049</td>\n",
       "      <td>0.033562</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     AAPL   V HD  KO JNJ AMGN NVDA  Portfolio Weighted Variance  \\\n",
       "2642   13  67  3  14   1    1    1                         1.46   \n",
       "\n",
       "      Portfolio Weighted Return  Portfolio Weighted Sharpe Ratio  Total Weight  \n",
       "2642                      0.049                         0.033562         100.0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Outputting the optimal weighting <-- highest sharpe ratio\n",
    "optimal_port"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
